pipeline {
    options {
        disableConcurrentBuilds()
    }

    agent {
        node {
            label 'cnam'
        }
    }

    parameters {
        string(name: 'CHART_NAME', description: 'Chart name e.g.: eric-cn-app-mgmt-integration')
        string(name: 'CHART_REPO', description: 'Chart repo e.g.: https://arm.sero.gic.ericsson.se/artifactory/proj-bdgs-cn-app-mgmt-ci-internal-helm')
        string(name: 'CHART_VERSION', description: 'Chart version e.g.: 1.0.0-1')
        string(name: 'GERRIT_REFSPEC', description: 'Gerrit Refspect of the integration chart git repo e.g.: refs/*')
    }

    environment {
        bob2 = "docker run --rm " +
                '--workdir "`pwd`" ' +
                '--env JENKINS_URL=${JENKINS_URL} ' +
                '--env API_TOKEN=${API_TOKEN} ' +
                '--env JOB_NAME=${JOB_NAME} ' +
                '--env BUILD_NUMBER=${BUILD_NUMBER} ' +
                '--env GERRIT_USERNAME=${GERRIT_USERNAME} ' +
                '--env GERRIT_PASSWORD=${GERRIT_PASSWORD} ' +
                '--env CHART_NAME=${CHART_NAME} ' +
                '--env CHART_VERSION=${CHART_VERSION} ' +
                '--env CHART_REPO=${CHART_REPO} ' +
                '--env CHART_PATH=${CHART_PATH} ' +
                '-u $(id -u ${USER}):$(id -g ${USER}) ' +
                "-v \"`pwd`:`pwd`\" " +
                "-v /var/run/docker.sock:/var/run/docker.sock " +
                "armdocker.rnd.ericsson.se/sandbox/adp-staging/adp-cicd/bob.2.0:${BOB2_VERSION}"

        CHART_PATH = 'eric-cn-app-mgmt-integration'
        BOB2_VERSION = '1.7.0-78'
        REPOS_TOKEN = 'cnamfid-repository-tokens-file'
        API_TOKEN = 'cnamfid-sero-artifactory-api-token-id'
        MARKETPLACE_TOKEN = credentials("helm-executor-marketpalce-token-id")
        GERRIT_ID = 'cdbc7c5b-9a86-4074-a15e-3e6558998860'
    }

    stages {
        stage('Init') {
            steps {
                script {
                    if (params.GERRIT_REFSPEC != null && params.GERRIT_REFSPEC != '') {
                        def tokens = params.GERRIT_REFSPEC.split("/")
                        if (tokens.length == 5) {
                            def link = '<a href="https://gerrit.ericsson.se/#/c/' + tokens[3] + '/' + tokens[4] + '">' + tokens[3] + ',' + tokens[4] + '</a>'
                            currentBuild.description = link
                        } else {
                            def link = '<a href="' + env.BUILD_NUMBER + '/console">' + params.GERRIT_REFSPEC + '</a>'
                            currentBuild.description = link
                        }
                    } else {
                        def link = '<a href="' + env.BUILD_NUMBER + '/console">' + params.CHART_NAME + ':' + params.CHART_VERSION + '</a>'
                        currentBuild.description = link
                    }
                }
                sh "rm -rf ${env.WORKSPACE}/.kube/ ${env.WORKSPACE}/.bob/ && mkdir ${env.WORKSPACE}/.kube/ ${env.WORKSPACE}/.bob/"
            }
        }
        stage('Prepare Helm Chart') {
            steps {
                // Generate integration helm chart
                withCredentials([
                        usernamePassword(credentialsId: "${env.GERRIT_ID}", usernameVariable: 'GERRIT_USERNAME', passwordVariable: 'GERRIT_PASSWORD'),
                        file(credentialsId: "${env.REPOS_TOKEN}", variable: 'HELM_REPO_CREDENTIALS'),
                        string(credentialsId: "${env.API_TOKEN}", variable: 'API_TOKEN')
                ]) {
                    sh "cp \$HELM_REPO_CREDENTIALS .bob/.helm-repositories.yaml"
                    sh "${bob2} prepare"
                }
            }
        }
    }
    post {
        always {
            archiveArtifacts 'artifact.properties'
            cleanWs()
        }
    }
}
