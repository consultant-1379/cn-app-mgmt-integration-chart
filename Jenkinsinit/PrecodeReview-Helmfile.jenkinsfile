pipeline {
    options {
        disableConcurrentBuilds()
    }

    agent {
        node {
            label 'cnam'
        }
    }

    parameters {
        choice(name: 'K8_ENV', choices: 'hahn117\nbbb\nccc', description: 'Choose Env')
    }

    environment {
        bob2 = 'env | egrep -v "PATH|GERRIT_REFSPEC" > ${WORKSPACE}/env_var_bob; docker run --rm ' +
                '--env-file ${WORKSPACE}/env_var_bob -v ${WORKSPACE}/.docker/config.json:${HOME}/.docker/config.json ' +
                '-v /var/run/docker.sock:/var/run/docker.sock -v ${PWD}:${PWD} ' +
                '--workdir ${PWD} -u ${UID}:${GROUPS} -e HOME=${HOME} ' +
                'armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob.2.0:${BOB2_VERSION}'

        DOCKER_CONFIG = 'CNAMFID_Docker_ARM'
        HELM_CMD = "docker run --rm -v ${env.WORKSPACE}/.kube/config:/root/.kube/config -v ${env.WORKSPACE}/helm-target:/root/.helm -v ${env.WORKSPACE}:${env.WORKSPACE} linkyard/docker-helm:2.10.0"
        API_TOKEN = credentials("cnamfid-sero-artifactory-api-token-id")
        GERRIT_ID = 'cdbc7c5b-9a86-4074-a15e-3e6558998860'
        NAMESPACE = 'ci-int-helmfile'
        BASE_HELMFILE = 'helmfile.yaml'
        BOB2_VERSION = '1.16.0-0'
    }

    stages {

        stage("Load environment variable") {
             steps {
                 withCredentials([ file(credentialsId: "${env.DOCKER_CONFIG}", variable: 'DOCKER_ARM_CONFIG') ])
                     { writeFile file: './.docker/config.json', text: readFile(DOCKER_ARM_CONFIG) }
                 script {
                          def props = readProperties file: './Jenkinsinit/env/k8s-env/' + params.K8_ENV + '.conf'
                          env.KUBERNETES_CONFIG_FILE_NAME = props.KUBERNETES_CONFIG_FILE_NAME
                          env.HELM_PIPELINE_VALUES = props.HELM_PIPELINE_VALUES
                          env.HELMFILE_ENV_PROFILE = props.HELMFILE_ENV_PROFILE
                          env.KUBERNETES_FQDN = props.KUBERNETES_FQDN
                    }
             }
        }

        stage('Init') {
            steps {
                    sh "${bob2} clean"
                 withCredentials([file(credentialsId: "${env.KUBERNETES_CONFIG_FILE_NAME}", variable: 'KUBE_CONF')]) {
                    sh "rm -rf ${env.WORKSPACE}/.kube/ ${env.WORKSPACE}/.bob/ && mkdir ${env.WORKSPACE}/.kube/ ${env.WORKSPACE}/.bob/"
                    sh "cp \$KUBE_CONF ${env.WORKSPACE}/.kube/config"
                }
            }
        }

        stage('Creating RBAC for deployment') {
             steps {
                   sh "${bob2} crd-install"
                   sh "${bob2} helm-RBAC-creation"
             }
        }

        stage('Deploy Helm Chart') {
            steps {
                   withCredentials([
                     usernamePassword(credentialsId: "${env.GERRIT_ID}", usernameVariable: 'GERRIT_USERNAME', passwordVariable: 'GERRIT_PASSWORD'),
                   ]) {
                        sh "${bob2} helmfile-deploy"
                      }
            }
            post {
                failure {
                    sh "${bob2} logs-collector"
                    archiveArtifacts 'logs_*.tgz'
                }
            }
        }
    }

    post {
        always {
                sh "${bob2} helm-RBAC-deleting || echo 'Nothing to remove'"
                sh "${bob2} cleanup-deploy"
                cleanWs()
        }
    }
}
