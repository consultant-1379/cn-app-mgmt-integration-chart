pipeline {
    options {
        disableConcurrentBuilds()
    }

    agent {
        node {
            label 'cnam'
        }
    }

    parameters {
        string(name: 'CHART_NAME' )
        string(name: 'CHART_REPO' )
        string(name: 'CHART_VERSION' )
        choice(name: 'K8_ENV', choices: 'hahn117\nbbb\nccc', description: 'Choose Env')
    }

    environment {
        bob2 = "docker run --rm " +
                '--workdir "`pwd`" ' +
                '--env JENKINS_URL=${JENKINS_URL} ' +
                '--env API_TOKEN=${API_TOKEN} ' +
                '--env JOB_NAME=${JOB_NAME} ' +
                '--env BUILD_NUMBER=${BUILD_NUMBER} ' +
                '--env GERRIT_USERNAME=${GERRIT_USERNAME} ' +
                '--env GERRIT_PASSWORD=${GERRIT_PASSWORD} ' +
                '--env CHART_NAME=${CHART_NAME} ' +
                '--env CHART_VERSION=${CHART_VERSION} ' +
                '--env CHART_REPO=${CHART_REPO} ' +
                '--env CHART_PATH=${CHART_PATH} ' +
                '--env BASE_HELMFILE=${BASE_HELMFILE} ' +
                '--env GIT_TAG_STATUS=${GIT_TAG_STATUS} ' +
                '--env NAMESPACE=${NAMESPACE} ' +
                '--env HELM_PIPELINE_VALUES=${HELM_PIPELINE_VALUES} ' +
                '--env HELMFILE_ENV_PROFILE=${HELMFILE_ENV_PROFILE} ' +
                '--env KUBERNETES_FQDN=${KUBERNETES_FQDN} ' +
                '-u $(id -u ${USER}):$(id -g ${USER}) ' +
                "-v \"`pwd`:`pwd`\" " +
                "-v /var/run/docker.sock:/var/run/docker.sock " +
                "armdocker.rnd.ericsson.se/sandbox/adp-staging/adp-cicd/bob.2.0:1.7.0-78"

        GIT_TAG_STATUS = 'false'
        CHART_PATH = 'helmfile'
        BASE_HELMFILE = 'helmfile.yaml'
        NAMESPACE = 'adp-ns-helmfile'
        REPOS_TOKEN = 'cnamfid-repository-tokens-file'
        API_TOKEN = 'cnamfid-sero-artifactory-api-token-id'
        MARKETPLACE_TOKEN = credentials("helm-executor-marketpalce-token-id")
        GERRIT_ID = 'cdbc7c5b-9a86-4074-a15e-3e6558998860'
    }

    stages {
        stage("Load environment variable") {
             steps {
                   script {
                          def props = readProperties file: './Jenkinsinit/env/k8s-env/' + params.K8_ENV + '.conf'
                          env.KUBERNETES_CONFIG_FILE_NAME = props.KUBERNETES_CONFIG_FILE_NAME
                          env.HELM_PIPELINE_VALUES = props.HELM_PIPELINE_VALUES
                          env.HELMFILE_ENV_PROFILE = props.HELMFILE_ENV_PROFILE
                          env.KUBERNETES_FQDN = props.KUBERNETES_FQDN
                    }
             }
        }
        stage('Init') {
            steps {
                script {
                    if (params.GERRIT_REFSPEC != null && params.GERRIT_REFSPEC != '') {
                        def tokens = params.GERRIT_REFSPEC.split("/")
                        if (tokens.length == 5) {
                            def link = '<a href="https://gerrit.ericsson.se/#/c/' + tokens[3] + '/' + tokens[4] + '">' + tokens[3] + ',' + tokens[4] + '</a>'
                            currentBuild.description = link
                        } else {
                            def link = '<a href="' + env.BUILD_NUMBER + '/console">' + params.GERRIT_REFSPEC + '</a>'
                            currentBuild.description = link
                        }
                    } else {
                        def link = '<a href="' + env.BUILD_NUMBER + '/console">' + params.CHART_NAME + ':' + params.CHART_VERSION + '</a>'
                        currentBuild.description = link
                    }
                }
                sh "rm -rf ${env.WORKSPACE}/.kube/ ${env.WORKSPACE}/.bob/ && mkdir ${env.WORKSPACE}/.kube/ ${env.WORKSPACE}/.bob/"
            }
        }

        stage('Prepare Helmfle Chart') {
            steps {
                withCredentials([
                        usernamePassword(credentialsId: "${env.GERRIT_ID}", usernameVariable: 'GERRIT_USERNAME', passwordVariable: 'GERRIT_PASSWORD'),
                        file(credentialsId: "${env.REPOS_TOKEN}", variable: 'HELM_REPO_CREDENTIALS'),
                        file(credentialsId: "${env.KUBERNETES_CONFIG_FILE_NAME}", variable: 'KUBE_CONF'),
                        string(credentialsId: "${env.API_TOKEN}", variable: 'API_TOKEN')
                ]) {
                     script {
                          if (params.CHART_VERSION.contains('+') || params.CHART_NAME.contains('eric-lcm-helm-executor') || params.CHART_REPO.contains('proj-adp-umbrella-released-helm'))
                          {
                                  sh "cp \$HELM_REPO_CREDENTIALS .bob/.helm-repositories.yaml"
                                  sh "cp \$KUBE_CONF ${env.WORKSPACE}/.kube/config"
                                  sh "${bob2} prepare"
                          } else {
                                  echo "Skipping..."
                          }
                     }
                }
            }
        }

        stage('Creating RBAC for deployment') {
             steps {
                     script {
                          if (params.CHART_VERSION.contains('+') || params.CHART_NAME.contains('eric-lcm-helm-executor') || params.CHART_REPO.contains('proj-adp-umbrella-released-helm'))
                          {
                                  sh "${bob2} helm-RBAC-creation"
                          } else {
                                  echo "Skipping..."
                          }
                     }
             }
        }

        stage('Deploy chart with helmfile') {
            steps {
                withCredentials([
                        usernamePassword(credentialsId: "${env.GERRIT_ID}", usernameVariable: 'GERRIT_USERNAME', passwordVariable: 'GERRIT_PASSWORD'),
                        file(credentialsId: "${env.REPOS_TOKEN}", variable: 'HELM_REPO_CREDENTIALS'),
                        string(credentialsId: "${env.API_TOKEN}", variable: 'API_TOKEN'),
                ]) {
                     script {
                          if (params.CHART_VERSION.contains('+') || params.CHART_NAME.contains('eric-lcm-helm-executor') || params.CHART_REPO.contains('proj-adp-umbrella-released-helm'))
                          {
                                  sh "${bob2} crd-install"
                                  sh "${bob2} adp-helmfile-deploy"
                          } else {
                                  echo "Skipping..."
                                  sh 'echo CHART_NAME=${CHART_NAME} >> artifact.properties' 
                                  sh 'echo CHART_VERSION=${CHART_VERSION} >> artifact.properties'
                                  sh 'echo CHART_REPO=${CHART_REPO} >> artifact.properties'
                          }
                     }
                }
            }
            post {
                 failure {
                          sh "${bob2} logs-collector || echo 'Nothing to do'"
                          archiveArtifacts 'logs_*.tgz'
                 }
                 always {
                        sh "${bob2} helm-RBAC-deleting || echo 'Nothing to remove'"
                        sh "${bob2} remove-installed-release || echo 'Nothing to remove'"
                 }
            }
        }
    }
    post {
        always {
            archiveArtifacts 'artifact.properties'
            cleanWs()
        }
    }
}
